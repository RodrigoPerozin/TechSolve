-- MySQL Script generated by MySQL Workbench
-- Thu Oct 13 19:42:16 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_techsolve
-- -----------------------------------------------------
-- Banco de dados da TechSolve

-- -----------------------------------------------------
-- Schema db_techsolve
--
-- Banco de dados da TechSolve
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_techsolve` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `db_techsolve`;

-- -----------------------------------------------------
-- Table `db_techsolve`.`permissoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_techsolve`.`permissoes` (
  `idpermissoes` INT UNSIGNED NOT NULL COMMENT 'Numero de identificacao do nivel de permissão do usuario.',
  `descricao` VARCHAR(55) NOT NULL COMMENT 'Descricao do nivel de permissao.',
  PRIMARY KEY (`idpermissoes`),
  UNIQUE INDEX `idpermissoes_UNIQUE` (`idpermissoes` ASC),
  UNIQUE INDEX `descricao_UNIQUE` (`descricao` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_techsolve`.`funcionarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_techsolve`.`funcionarios` (
  `idfuncionario` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Chave primaria, guarda um numero de identificacao do funcionario.',
  `idpermissao` INT UNSIGNED NOT NULL COMMENT 'Numero de identificacao do nivel de permissao do usuario.',
  `data_cadastro` DATE NOT NULL COMMENT 'data de cadastro do funcionário.',
  `nome` VARCHAR(65) NOT NULL COMMENT 'Nome do funcionario.',
  `email` VARCHAR(45) NOT NULL COMMENT 'E-mail do funcionario.',
  `cpf` BIGINT(11) ZEROFILL NOT NULL COMMENT 'CPF do funcionario.',
  `telefone` BIGINT(11) ZEROFILL NOT NULL COMMENT 'Telefone do funcionario',
  `data_nasc` DATE NOT NULL COMMENT 'Data de nascimento do funcionario.',
  `ativado` TINYINT(1) ZEROFILL NOT NULL COMMENT 'Status do cadastro do funcionario.\n\n1 - ativado\n0 - desativado',
  `senha` VARCHAR(50) NULL COMMENT 'Senha do funcionario para acesso do sistema.',
  PRIMARY KEY (`idfuncionario`),
  UNIQUE INDEX `idfuncionario_UNIQUE` (`idfuncionario` ASC),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_funcionarios_permissoes1_idx` (`idpermissao` ASC),
  CONSTRAINT `fk_funcionarios_permissoes1`
    FOREIGN KEY (`idpermissao`)
    REFERENCES `db_techsolve`.`permissoes` (`idpermissoes`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_techsolve`.`clientes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_techsolve`.`clientes` (
  `idcliente` INT NOT NULL AUTO_INCREMENT COMMENT 'Numero de identificacao do cliente.',
  `data_cadastro` DATE NOT NULL COMMENT 'data de cadastro do cliente.',
  `nome` VARCHAR(55) NOT NULL COMMENT 'Nome do cliente.',
  `email` VARCHAR(45) NOT NULL COMMENT 'Endereco de email do cliente.',
  `cpf` BIGINT(11) ZEROFILL UNSIGNED NOT NULL COMMENT 'CPF do cliente.',
  `telefone` BIGINT(11) ZEROFILL UNSIGNED NOT NULL COMMENT 'Telefone para contato com o cliente.',
  PRIMARY KEY (`idcliente`),
  UNIQUE INDEX `idcliente_UNIQUE` (`idcliente` ASC),
  UNIQUE INDEX `nome_UNIQUE` (`nome` ASC),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_techsolve`.`ordens_de_servico`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_techsolve`.`ordens_de_servico` (
  `idordem_servico` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Numero de identificacao da OS.',
  `status` INT NOT NULL COMMENT '0 - Criada\n1 - Assumida\n2 - Em avaliação-orca\n3 - Em aprovação-orca\n4 - Novo problema encontrado\n5 - Cancelada',
  `data_criacao` DATE NOT NULL COMMENT 'Data de criação da OS.',
  `data_termino` DATE NULL COMMENT 'Data de termino da OS',
  `idcliente` INT NOT NULL COMMENT 'Identificacao do cliente que requisitou a OS.',
  `idatendente_responsavel` INT UNSIGNED NOT NULL COMMENT 'Numero de identificacao do(a) atendente responsavel pelo atendimento do cliente da OS.',
  `idtecnico_responsavel` INT UNSIGNED NULL COMMENT 'Numero de identificacao do tecnico responsavel por executar a OS.',
  `orcamento` TEXT NULL COMMENT 'orçamento da O.S',
  `valor_total` DECIMAL(7,2) NULL COMMENT 'valor total do orçamento da ordem de servico.',
  `descricao_problema` TEXT NOT NULL COMMENT 'Descricao do problema brevemente.',
  `imei_aparelho` VARCHAR(75) NOT NULL COMMENT 'código de identificação do aparelho',
  `modelo_aparelho` VARCHAR(45) NOT NULL COMMENT 'modelo do aparelho',
  `cor_aparelho` VARCHAR(45) NULL COMMENT 'cor do aparelho',
  `novo_problema` TINYINT(1) NOT NULL COMMENT 'Se foi encontrado um novo problema dentro da execucao da manutencao do aparelho.',
  `motivo_cancelamento` VARCHAR(250) CHARACTER SET 'binary' NULL COMMENT 'Motivo do cancelamento da OS.',
  `just_transf_resp` TEXT NULL COMMENT 'Justificativa da transferencia do tecnico responsavel pela manutencao/avaliacao.',
  `info_novo_problema` TEXT NULL COMMENT 'Informacoes do novo problema encontrado.',
  PRIMARY KEY (`idordem_servico`),
  UNIQUE INDEX `idordem_servico_UNIQUE` (`idordem_servico` ASC),
  INDEX `fk_ordem_servico_clientes_idx` (`idcliente` ASC),
  INDEX `fk_ordens_de_servico_funcionarios1_idx` (`idatendente_responsavel` ASC),
  INDEX `fk_ordens_de_servico_funcionarios3_idx` (`idtecnico_responsavel` ASC),
  CONSTRAINT `fk_ordem_servico_clientes`
    FOREIGN KEY (`idcliente`)
    REFERENCES `db_techsolve`.`clientes` (`idcliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ordens_de_servico_funcionarios1`
    FOREIGN KEY (`idatendente_responsavel`)
    REFERENCES `db_techsolve`.`funcionarios` (`idfuncionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ordens_de_servico_funcionarios3`
    FOREIGN KEY (`idtecnico_responsavel`)
    REFERENCES `db_techsolve`.`funcionarios` (`idfuncionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

DELIMITER $$

CREATE PROCEDURE `insertPermissao` (IN idpermissoesParam INT,IN nomeParam VARCHAR(55))
BEGIN
	INSERT INTO `permissoes` (idpermissoes, descricao) VALUES (idpermissoesParam, nomeParam);
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `insertFuncionario` (
	IN nomeParam VARCHAR(65),
    IN dataNascimentoParam DATE,
    IN dataCadastroParam DATE,
    IN cpfParam BIGINT(11),
    IN emailParam VARCHAR(45),
    IN telefoneParam BIGINT(11),
    IN ativadoParam TINYINT(1),
    IN senhaParam VARCHAR(50),
    IN idpermissaoParam INT(10)
)
BEGIN
	INSERT INTO `funcionarios` (nome, data_nasc, data_cadastro, cpf, email, telefone, ativado, senha, idpermissao) 
    VALUES (nomeParam, dataNascimentoParam, dataCadastroParam, cpfParam, emailParam, telefoneParam, ativadoParam, senhaParam, idpermissaoParam);
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `insertCliente` (
	IN nomeParam VARCHAR(55), 
    IN telefoneParam BIGINT(11), 
    IN cpfParam BIGINT(11), 
    IN emailParam VARCHAR(45),
    IN dataCadastroParam DATE)
BEGIN
	INSERT INTO `clientes` (nome, telefone, cpf, email, data_cadastro) 
    VALUES (nomeParam, telefoneParam, cpfParam, emailParam, dataCadastroParam);
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `deletePermissao` (IN idpermissoesParam INT(10))
BEGIN
	DELETE FROM `permissoes` WHERE idpermissoes=idpermissoesParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `deleteCliente` (IN idclienteParam INT(11))
BEGIN
	DELETE FROM `clientes` WHERE idcliente=idclienteParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `deleteFuncionario` (IN idFuncionarioParam INT(11))
BEGIN
	DELETE FROM `funcionarios` WHERE idffuncionario=idFuncionarioParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getClientes` ()
BEGIN
	SELECT * FROM `clientes`;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getOSs` ()
BEGIN
	SELECT * FROM `ordens_de_servico`;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getPermissoes` ()
BEGIN
	SELECT * FROM `permissoes`;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getFuncionarios` ()
BEGIN
	SELECT * FROM `funcionarios`;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getFuncionario` (IN idfuncionarioParam INT(10))
BEGIN
	SELECT * FROM `funcionarios` WHERE idfuncionario=idfuncionarioParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getCliente` (IN idclienteParam INT(11))
BEGIN
	SELECT * FROM `clientes` WHERE idcliente=idclienteParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getPermissao` (IN idpermissaoParam INT(11))
BEGIN
	SELECT * FROM `permissoes` WHERE idpermissoes=idpermissaoParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `getOS` (IN idOSParam INT(10))
BEGIN
	SELECT * FROM `ordens_de_servico` WHERE idordem_servico=idOSParam;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE `createOS` (
    IN dataCriacao DATE,
    IN statusOS INT,
    IN idCliente INT(10),
    IN imeiAparelho VARCHAR(75),
    IN modeloAparelho VARCHAR(45),
    IN idatendente_responsavel INT,
    IN descricao_problema TEXT,
    IN novoProblema TINYINT(1)
)
BEGIN
	INSERT INTO ordens_de_servico 
    (data_criacao, statusOS, 
    idcliente, imei_aparelho, 
    modelo_aparelho, idatendente_responsavel, 
    descricao_problema, novo_problema) 
    VALUES 
    (dataCriacao, 
    statusOS, 
    idCliente, 
    imeiAparelho, 
    modeloAparelho, 
    idatendente_responsavel, 
    descricao_problema, 
    novoProblema);
END $$

DELIMITER ;

call insertPermissao(1, 'Atendente');
call insertPermissao(2, 'Gerente');
call insertPermissao(3, 'Técnico em Manutenção');

call insertFuncionario("Rodrigo Destri", "2003-03-31", "2022-10-13", 1250311089, "rodrigod@gmail.com", 47996033741, 1, "4a6e3f00ba5cf62d898c85fe772906e2", 2);
call insertFuncionario("David Guetta", "2002-02-12", "2022-10-13", 1350361089, "davidg@gmail.com", 47996033741, 1, "6fd742a61bd034804c00c49b180450204320314", 3);
call insertFuncionario("Felipe Goulag", "2000-01-20", "2022-10-13", 12532110898, "felipeg@gmail.com", 47996033741, 1, "6fd742a61bd034804c00c49b180450204320314", 1);

call insertCliente("Fernando Cegonha", 47996033741, 14396449867, "fernandoc@gmail.com", "2022-10-13");
call insertCliente("Maria Cega", 47996033741, 14393439833, "mariac@hotmail.com", "2022-10-13");
call insertCliente("Albert Estônia", 47996033741, 24326429262, "alberte@gmail.com", "2022-10-13");

SELECT * FROM permissoes;
SELECT * FROM ordens_de_servico;
SELECT * FROM clientes;
SELECT * FROM funcionarios;